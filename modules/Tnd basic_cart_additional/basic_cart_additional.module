<?

/**
 * Implements hook_menu().
 */
function basic_cart_additional_menu() {
  $items = array();

  $items['ajax-cart/add'] = array(
    'description'       => 'Add to cart ajax url',
    'page callback'     => 'basic_cart_additional_add_to_cart',
    'delivery callback' => 'ajax_deliver',
    'access arguments'  => array('use basic cart'),
    'type'              => MENU_CALLBACK,
    );
  $items['ajax-cart/reset'] = array(
    'description' => 'Ajax cart reset',
    'page callback' => 'basic_cart_additional_reset_cart',
    'delivery callback' => 'ajax_deliver',
    'access arguments' => array('use basic cart'),
    'type'              => MENU_CALLBACK,
    );
  $items['ajax-cart/remove'] = array(
    'description' => 'Ajax cart remove',
    'page callback' => 'basic_cart_additional_remove_cart',
    'delivery callback' => 'ajax_deliver',
    'access arguments' => array('use basic cart'),
    'type'              => MENU_CALLBACK,
    );
  return $items;
}

/**
 * Implements hook_theme_registry_alter().
 */
function basic_cart_additional_theme_registry_alter(&$theme_registry) {
  if(isset($theme_registry['basic_cart_render_cart_element'])) {  
    $theme_registry['basic_cart_render_cart_element']['function'] = 'basic_cart_additional_theme_basic_cart_render_cart_element';
  }
  if(isset($theme_registry['basic_cart_add_to_cart'])) {
    $theme_registry['basic_cart_add_to_cart']['function'] = 'basic_cart_additional_add_to_cart_button';
  }
}

/**
 * form element theme
 */
function basic_cart_additional_theme_basic_cart_render_cart_element($variables) {
  // Element name and nid.
  $name = $variables['form']['#name'];
  $nid = (int) str_replace(array('cartcontents[', ']'), '', $name);
  if (empty($nid)) {
    return '';
  }
  // Delete image.
  $vars = array(
    'path' => base_path() . drupal_get_path('module', 'basic_cart') . '/images/delete2.png',
    'alt' => t('Remove from cart'),
    'title' => t('Remove from cart'),
    'attributes' => array('class' => 'basic-cart-delete-image-image'),
    );
  $delete_link = l(theme('image', $vars), 'ajax-cart/remove/' . $nid, array('html' => TRUE, 'attributes' => array('class' => array('use-ajax'))));
  // Getting the node for it's title and description.
  $node = basic_cart_get_cart($nid);
  // Node description.
  $desc = $node->field_sku['und'][0]['value'];
  // Price and currency.
  // $unit_price = isset($node->basic_cart_unit_price) ? $node->basic_cart_unit_price : 0;
  // $unit_price = basic_cart_price_format($unit_price);
  
  // Prefix.
  $prefix  = '<div class="basic-cart-cart-contents row">';
  $prefix .= '  <div class="basic-cart-cart-node-title cell">' . l($node->title, 'node/' . $nid) . '<br />';
  $prefix .= '    <span class="basic-cart-cart-node-summary">' . $desc . '</span>';
  $prefix .= '  </div>';
  $prefix .= '  <div class="basic-cart-cart-quantity cell">';
  $prefix .= '    <div class="cell">';
  // Suffix.
  $suffix  = '    </div>';
  $suffix .= '  </div>';
  $suffix .= '  <div class="basic-cart-delete-image cell">' . $delete_link . '</div>';
  $suffix .= '</div>';
  
  // Rendering the element as textfield.
  $quantity = theme('textfield', $variables['form']);
  // Full view return.
  return $prefix . $quantity . $suffix;
}

/**
 * Theme function implementation.
 */
function basic_cart_additional_add_to_cart_button($vars) {
  $path = str_replace('cart', 'ajax-cart', $vars['path']);
  $css_class = $vars['css_class'];
  $options = array(
    'attributes' => array(
      'class' => array($css_class, 'use-ajax')
      )
    );
  drupal_add_js(drupal_get_path('module', 'basic_cart_additional') . '/basic_cart_js_command.js', array('scope' => 'footer'));
  return '<div class="basic-cart-add-to-cart">' . l(t('Add to cart'), $path, $options) . '</div>';
}

/**
 * Implements hook_form_alter().
 */
function basic_cart_additional_form_alter(&$form, &$form_state, $form_id) {
  // alter only basic_cart form
  if($form_id == 'basic_cart_cart_form') {
    $form['#id'] = 'basic-cart-cart-form';
    // add reset button and weight
    $form['buttons']['reset'] = array(
      '#prefix' => '<div class="btn-reset-wrapper">',
      '#suffix' => '</div>',
      '#type' => 'button',
      '#value' => t('Reset'),
      '#ajax' => array('path' => 'ajax-cart/reset'),
      '#weight' => 1,
      );
    // change button weight
    if(isset($form['buttons']['checkout'])) {
      $form['buttons']['checkout']['#weight'] = 2;
      $form['buttons']['checkout']['#prefix'] = '<div class="btn-checkout-wrapper">';
      $form['buttons']['checkout']['#suffix'] = '</div>';
      $form['buttons']['checkout']['#type'] = 'button';
      $form['buttons']['checkout']['#ajax'] = array(
        'callback' => '_basic_cart_additional_ajax_cb'
        );
      $form['buttons']['checkout']['#attached'] = array(
        'js' => array(
          drupal_get_path('module', 'basic_cart_additional') . '/basic_cart_js_command.js' => array(
            'scope' => 'footer',
            ),
          ),
        );
    }
    // remove total price
    unset($form['total_price']);
    // change submit callback
    $form['#submit'] = array('_basic_cart_additional_cart_form_submit');
  }
  elseif ($form_id == 'order_node_form') {
    $prefix = '<div class="half-form">';
    $suffix = '</div>';
    $form['title']['#prefix'] = $form['field_email']['#prefix'] = $form['field_phone']['#prefix'] = $form['field_title_of_company']['#prefix'] = $prefix;
    $form['title']['#suffix'] = $form['field_email']['#suffix'] = $form['field_phone']['#suffix'] = $form['field_title_of_company']['#suffix'] = $suffix;
    _basic_cart_additional_set_pleceholder_hide_title($form['title']);
    _basic_cart_additional_set_pleceholder_hide_title($form['body']);
    _basic_cart_additional_set_pleceholder_hide_title($form['field_email']);
    _basic_cart_additional_set_pleceholder_hide_title($form['field_phone']);
    _basic_cart_additional_set_pleceholder_hide_title($form['field_title_of_company']);
    _basic_cart_additional_set_pleceholder_hide_title($form['field_country']);
    $form['field_country']['und']['#options']['_none'] = t('Country');
    // dpm($form['field_country']);
    $form['pref'] = array(
      '#markup' => '<div class="checkout-header"><h2> ' .
      t('Send to Us') . '</h2><h4>' . 
      t('fill in the form, and our manager will contact you') . '</h4></div>',
      '#weight' => -10,
      );
    unset($form['field_total_price']);
    unset($form['vat']);
    // some magic here, if we don't use this code, ajax breaks
    $form['#process'][] = 'checkout_form_process';
    $form['actions']['submit']['#submit'][] = '_basic_cart_additional_form_submit';
    $form['actions']['submit']['#value'] = t('Submit order');
  }
}
function checkout_form_process($form) {
  module_load_include('pages.inc', 'node');
  return $form;
}

function _basic_cart_additional_form_submit(&$form, &$form_state) {
  unset($form_state['redirect']);
  $form_state['#cbox_commands']['after'][] = 
    // ajax_command_alert('This alert message');
  array(
    'command' => 'open_colorbox',
    'href' => '/checkout/thank-you',
    'sleep' => 500
    );
}

function _basic_cart_additional_ajax_cb($form, $form_state) {
  foreach ($form_state['values']['cartcontents'] as $nid => $value) {
    $quantity = (int) $value;
    if ($quantity > 0) {
      $_SESSION['basic_cart']['cart'][$nid]->basic_cart_quantity = $quantity;
    }
  // If the quantity is zero, we just remove the node from the cart.
    elseif ($quantity == 0) {
      unset($_SESSION['basic_cart']['cart'][$nid]);
    }
  }

  $commands[] = array(
    'command' => 'open_colorbox',
    'href' => '/checkout'
    );

  return array(
    '#type' => 'ajax',
    '#commands' => $commands,
    );
}

/**
 * Shopping cart form.
 * copy common callback and add new button handler
 */
function _basic_cart_additional_cart_form_submit($form_id, $form_state) {
  foreach ($form_state['values']['cartcontents'] as $nid => $value) {
    $quantity = (int) $value;
    if ($quantity > 0) {
      $_SESSION['basic_cart']['cart'][$nid]->basic_cart_quantity = $quantity;
    }
  // If the quantity is zero, we just remove the node from the cart.
    elseif ($quantity == 0) {
      unset($_SESSION['basic_cart']['cart'][$nid]);
    }
  }

  if (module_exists('basic_cart_order') && $form_state['values']['op'] == t('Checkout')) {
    drupal_goto('checkout');
  }
  elseif ($form_state['values']['op'] == t('Reset')) {
    drupal_goto('ajax-cart/reset');
  }
  else {
    drupal_set_message(t('Shopping cart updated.'));
  }
}

/**
 * Implements hook_block_info().
 */
function basic_cart_additional_block_info() {
  $blocks['tnd_shopping_cart'] = array(
    'info' => t('TND Shopping cart'),
    'cache' => DRUPAL_NO_CACHE,
    );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function basic_cart_additional_block_view($delta = '') {
  // Check if the current user has access.
  switch ($delta) {
    case 'tnd_shopping_cart':
    if (user_access('use basic cart')) {
        // get common cart form
      $form = basic_cart_additional_cart();

      $block['subject'] = t('Your cart');
      $block['content'] = render($form);

      return $block;
    }
    break;
  }
}

/**
 * Callback function for cart listing.
 */
function basic_cart_additional_cart() {
  $cart = basic_cart_get_cart();
  $count = 0;
  $output = array();
  $empty_class = 'cart-empty';
  if (!empty($cart)) {
    $count = count($cart);
    $form = drupal_get_form('basic_cart_cart_form');
    $form['#weight'] = 10;
    $output['form'] = $form;
    $empty_class = '';
  }

  $cart_btn = "<div class=\"cart-btn $empty_class\"><div class=\"cart-icon\"></div>";
  $cart_btn .= '<div class="cart-btn-content"><span class="cart-count">' . $count . '</span>'. t('items') . '<span class="cart-arrow"></span></div>';
  $cart_btn .= '</div>';
  $output['btn'] = array(
    '#type' => 'markup',
    '#markup' => $cart_btn,
    '#weight' => 1,
    );
  $output[] = array(
    '#markup' => '<div class="row"><div class="col-xs-8 col-sm-12 pull-right cart-inner-wrapper">',
    '#weight' => -100,
    );
  $output[] = array(
    '#markup' => '</div></div>',
    '#weight' => 100,
    );
  return $output;
}

function _basic_cart_additional_set_pleceholder_hide_title(&$item) {
  if(isset($item['#title'])){
    $item['#attributes']['placeholder'] = $item['#title'];
    $item['#title_display'] = 'invisible';
  }
  elseif(isset($item['und']['#title'])){
    $item['und']['#attributes']['placeholder'] = $item['und']['#title'];
    $item['und']['#title_display'] = 'invisible'; 
    if(isset($item['und'][0]['#title'])){
      $item['und'][0]['#attributes']['placeholder'] = $item['und'][0]['#title'];
      $item['und'][0]['#title_display'] = 'invisible'; 
    }
    if(isset($item['und'][0]['value']['#title'])){
      $item['und'][0]['value']['#attributes']['placeholder'] = $item['und'][0]['value']['#title'];
      $item['und'][0]['value']['#title_display'] = 'invisible'; 
    }
  }
}

function basic_cart_additional_preprocess_field(&$variables) {  
  $field_name = $variables['element']['#field_name'];  
  // if ($field_name == 'field_example_field') {
  //   // Your code here.
  // }
}

/**
 * add to cart page callback
 */
function basic_cart_additional_add_to_cart($nid = NULL, $quantity = 1) {
  $nid = (int) $nid;
  $quantity = (int) $quantity;
  if ($nid > 0 && $quantity > 0) {
    // If a node is added more times, just update the quantity.
    $cart = basic_cart_get_cart();
    if (!empty($cart) && in_array($nid, array_keys($cart))) {
      // Clicked 2 times on add to cart button. Increment quantity.
      $_SESSION['basic_cart']['cart'][$nid]->basic_cart_quantity += $quantity;
    }
    else {
      $node = node_load($nid);
      $node->basic_cart_quantity = $quantity;
      // Adding description.
      $body = field_get_items('node', $node, 'body');
      $description = isset($body[0]['value']) ? check_plain(strip_tags($body[0]['value'])) : '';
      $node->basic_cart_node_description = $description;
      // Unit price.
      $unit_price = field_get_items('node', $node, 'price');
      $unit_price = isset($unit_price[0]['value']) ? check_plain(strip_tags($unit_price[0]['value'])) : 0;
      $node->basic_cart_unit_price = $unit_price;
      
      // Storing in session.
      $_SESSION['basic_cart']['cart'][$nid] = $node;
    }
  }

  $block = module_invoke('basic_cart_additional', 'block_view', 'tnd_shopping_cart');
  $commands = array();
  $commands[] = ajax_command_html('#block-basic-cart-additional-tnd-shopping-cart', $block['content']);  
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * reset page callback
 */
function basic_cart_additional_reset_cart() {
  unset($_SESSION['basic_cart']['cart']);
  $block = module_invoke('basic_cart_additional', 'block_view', 'tnd_shopping_cart');
  $commands = array();
  $commands[] = ajax_command_html('#block-basic-cart-additional-tnd-shopping-cart', $block['content']);
  $html = '<div class="cbox-status">'. 
          '<h1>'. t('Thanks for your question') .'</h1>'.
          '<p>'. t('Our manager will contact you soon how its posible.') . '</p>' .
          '<div class="cbox-status-close-wrapper"><button id="cbox-status-close">'. t('Close') .'</button></div>'.
          '</div>';
  $commands[] = array(
    'command' => 'open_inline_colorbox',
    'html' => $html,
    );
  return array('#type' => 'ajax', '#commands' => $commands);
}

function basic_cart_additional_remove_cart($nid = NULL) {
  $nid = (int) $nid;
  if ($nid > 0) {
    unset($_SESSION['basic_cart']['cart'][$nid]);
  }
  $block = module_invoke('basic_cart_additional', 'block_view', 'tnd_shopping_cart');
  $commands = array();
  $commands[] = ajax_command_html('#block-basic-cart-additional-tnd-shopping-cart', $block['content']);
  return array('#type' => 'ajax', '#commands' => $commands);
}
